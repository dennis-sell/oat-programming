/* An implementation of Strings with various analytical functions. */

#include "stack.oat"

#ifndef __STRING_OAT__
#define __STRING_OAT__


class SNode <: Object {
  string item;
  SNode? next;

  new(string val)() 
    this.item = val;
  {
    this.next = null;
  }

  unit setnext(SNode? t) {
    this.next = t;
    return;
  }

  string getitem() {
    return this.item;
  }
};

class SStack <: Object {
  SNode? top;
  int numContents;

  new()(){
    this.top = null;
    this.numContents = 0;
  }

  unit push(string n) {
    SNode ntop = new SNode(n);
    ntop.setnext(this.top);
    this.top = ntop;
    this.numContents = this.numContents + 1;
    return;
  }

  bool isEmpty() {
    return this.numContents == 0;
  }

  string pop() {
    string r="";
    if?(SNode tch = this.top) {
      string ret = tch.getitem();
      this.top = tch.next;
      r = ret;
      this.numContents = this.numContents - 1;
    } else {
      print_string("Empty Stack! Returned -1\n");
    }
    return r;
  }
};


class StringBuffer <: Object {
  SStack buffer;
  
  new()() 
    this.buffer = new SStack();
  {}

  unit addString(string s) {
    this.buffer.push(s);  
  /*if? (Stack stack = this.buffer) {
      stack.push(s);
    }*/
    return;
  }

  string getContents() {
    string contents = "";
    while (!(this.buffer.isEmpty())) {
      contents = concat(this.buffer.pop(), contents);
    }
    return contents;
  }
};


int min(int a, int b) {
  int min = 0;
  if (a < b) {
    min = a;
  } else { 
    min = b;
  }
  return min;
}

/* a shorter way of writing length_of_string */
int length(string s) {
  return length_of_string(s);
}

/* Concatenates two string together. */
string concat(string s1, string s2) {
  int len1 = length(s1);
  int len2 = length(s2);
  int[] string1 = array_of_string(s1);
  int[] string2 = array_of_string(s2);
  int[] newString = new int [len1 + len2] (fun i -> 0);
  for (int i = 0; i < len1; i=i+1;) {
    newString[i] = string1[i];
  }
  for (int i = 0; i < len2; i=i+1;) {
    newString[i + len1] = string2[i];
  }
  return string_of_array(newString);
}

/* Returns the character at index i.*/
string charAt(int i, string str) {
  int[] charArray = array_of_string(str);
  int[] c = {charArray[i]};
  return string_of_array(c);
}

/* Checks if all the characters in both strings are the same. */
bool equals(string s1, string s2) {
  int[] arr1 = array_of_string(s1);
  int[] arr2 = array_of_string(s2);
  int len1 = length(s1);
  bool equivalent = true;
  if (len1 != length(s2)) {
    equivalent = false;
  }
  for (int i = 0; i < len1; i=i+1;) {
    if (arr1[i] != arr2[i]) equivalent = false;
  }
  return equivalent;
}

/* Returns the index of the first occurence of the entire substring within the main string passed in.
   If the substring is not found it returns -1. This function works for any length string, including
   those with length 1 which essentially represent chars. */

int indexOf(string substring, string mainstring) {
  int[] sub = array_of_string(substring);
  int[] main = array_of_string(substring);
  int len = length(mainstring);
  int length_of_sub = length(substring);
  int location = -1;
  for (int i = 0; (i < len) & (location < 0); i=i+1;) {
    if (main[i] == sub[0]) {
      if (equals(substring2(mainstring, i, i + length_of_sub), substring)) {
	location = i;
      }
    }
  }
  return location;
}

int indexOf2(string substring, string main, int start) {
  string shortenedMain = substring(main, start);
  return indexOf(substring, shortenedMain);
}

/* Returns the substring starting at the start index.
   An empty string is returned if the index is out of bounds. */
string substring(string s, int start) {
  int[] str = array_of_string(s);
  int newLen = length(s) - start;
  string result = "";
  if ((newLen > 0) & (start >= 0)) {
    int[] newString = new int[newLen] (fun i -> 0);
    int oldLen = length(s);
    for (int i = start; i < oldLen; i=i+1;) {
      newString[i-start] = str[i]; 
    }
    result = string_of_array(newString);
  }
  return result;
}


/* Returns the substring begining at the start index and including all chars up to the end index (inclusive)
      An empty string is returned if the index is out of bounds. */
string substring2(string s, int start, int end) {
  int len = length(s);
  int[] str = array_of_string(s);
  string result = "";
  if ((start >= 0) & (end >= 0) & (start < len) 
                   & (end < len) & (start < end)) {
    int [] newString = new int [end - start] (fun i -> 0);
    for (int i = 0; i < end - start; i=i+1;) {
      newString[i] = str[start + i];
    }
    result = string_of_array(newString);
  }
  return result;
}

/* Combines all the strings in the array, with a copy of the dividing string between every two.*/
string merge(string[] words, string div) {
  StringBuffer sb = new StringBuffer();
  int len = length_of_array(words);
  for (int i = 0; i < len; i=i+1;) {
    sb.addString(words[i]);
    sb.addString(div);
  }
  return sb.getContents();
}

string unwords(string[] words) {
  return merge(words, " ");
}

string unlines(string[] lines) {
  return merge(lines, "\n");
}
  

/* Sets all lowercase letters to uppercase. */
string toLowerCase(string s) {
  int[] str = array_of_string(s);
  int len = length(s);
  for (int i = 0; i < len; i=i+1;) {
    if ((str[i] >= 65) & (str[i] <= 90)) str[i] = str[i] + 32;
  }
  return string_of_array(str); 
}

/* Sets all uppercase letters to lowercase. */
string toUpperCase(string s) {
  int[] str = array_of_string(s);
  int len = length(s);
  for (int i = 0; i < len; i=i+1;) {
    if ((str[i] >= 97) & (str[i] <= 122)) str[i] = str[i] - 32;
  }
  return string_of_array(str);
}

/* Removes whitespace at the beginning and the end of a string. */
string trim(string s) {
  int[] str = array_of_string(s);
  int start = 0;
  int end = length(s);
  int curr = str[start];
  while (curr == 32 | curr == 9 | curr == 10) {
    start = start + 1;
    curr = str[start];
  }
  curr = str[end -1];
  while (curr == 32 | curr == 9 | curr == 10) {
    end = end - 1;
    curr = str[end - 1];
  }
  return substring2(s, start, end);
}

/* Uses dynamic programming to determine the minimum number of insertions, deletions, 
   and substitutions needed to get from one string to the other. */
int levenshteinDistance(string s1, string s2) {
  int m = length(s1);
  int n = length(s2);
  int[][] p = new int[][n+1] (fun i -> new int[m+1](fun i -> 0));

  int[] s = array_of_string(concat(" ",s1));
  int[] t = array_of_string(concat(" ",s2));
  
  for (int i = 1; i <= n; i=i+1;) {
    p[i][0] = i;
  }

  for (int j = 1; j <= m; j=j+1;) {
    p[0][j] = j;
  } 
  
  for (int i = 1; i <= n; i=i+1;) { 
    for (int j = 1; j <= m; j=j+1;) { 
	if (t[i] == s[j]) {
          p[i][j] = p[i-1][j-1];
        } else {
          p[i][j] = min( p[i][j-1] + 1, min(p[i-1][j] + 1, p[i-1][j-1] + 1));
        }
    }
  }
  return p[n][m];
}


/* Checks if all the characters in a string are letters. */
bool isAlpha(string s) {
  int[] str = array_of_string(s);
  int len = length(s);
  bool isAlpha = true;
  for (int i = 0; (i < len) & isAlpha; i=i+1;) {
    if ( !((str[i] >= 65 & str[i] <= 90) | (str[i] >= 97 & str[i] <= 122)) )   
      isAlpha = false;
  }
  return isAlpha;
}
  
/* Checks if all the characters in a string are letters or numbers. */
bool isAlphaNum(string s) {
  int[] str = array_of_string(s);
  int len = length(s);
  bool isAlphaNum = true;
  for (int i = 0; (i < len) & isAlphaNum; i=i+1;) {
    if ( !((str[i] >= 65 & str[i] <= 90) | 
           (str[i] >= 97 & str[i] <= 122) |
           (str[i] >= 48 & str[i] <= 57)) ) isAlphaNum = false;
  }
  return isAlphaNum;
}

bool contains(string sub, string s) {
  return indexOf(sub, s) != -1;
}

bool startsWith(string sub, string main) {
  return indexOf(sub, main) == 0;
}

bool endsWith(string sub, string main) {
  return startsWith(substring(main, length(main) - length(sub)), sub);
}

/* Helper functions for testing. */

unit test(string tester, string result) {
  print_string(tester);
  print_string(result);
  print_string("\n");
  return;
}

unit testi(string tester, int result) {
  print_string(tester);
  print_string(string_of_int(result));
  print_string("\n");
  return;
}

unit testb(string tester, bool result) {
  print_string(tester);
  print_string(string_from_bool(result));
  print_string("\n");
  return;
}

string string_from_bool(bool b) {
  string result = "";
  if (b) result = "true";
  else result = "false";
  return result;
}

/*************************************/


int program (int argc, string[] argv) {
  string s1 = "cat";
  string s2 = "dog";
  string s3 = "hamburger";
  string s4 = "Parker";
  test("dog + cat = ", concat(s1,s2));
  test("substring(\"hamburger\", 5) = ", substring(s3, 5));
  test("substring2(\"hamburger\", 2, 6) = ", substring2(s3, 2, 6));
  test("charAt(\"hamburger\", 4) = ", charAt(4, s3));
  testi("length(\"cat\") = ", length(s1));
  testb("(cat == cat) = ", equals(s1, s1));
  testb("(cat == dog) = ", equals(s1, s2));
  /*testi("indexOf(\"bu\", \"hamburger\") = ", indexOf("bu", s3));
  testi("indexOf(\"blarg\", \"hamburger\") = ", indexOf("blarg", s3));*/


  test("toUpperCase(\"dog\") = ", toUpperCase(s2));
  test("toUpperCase(\"Parker\") = ", toUpperCase(s4));
  test("toLowerCase(\"Parker\") = ", toLowerCase(s4));
  test("toLowerCase(\" 23 Pasds Ew\" = ", toLowerCase(" 23 Pasds Ew"));
  test("trim(\"    \\n   John   \") = ", concat("\"",concat(trim("    \n   John   "), "\"")));
  test("trim(\"Bob\") = ", trim("Bob"));


  testi("levenshtein distance of sitting and kitten = ", levenshteinDistance("sitting", "kitten"));
  testi("levenshtein distance of kitten and sitting = ", 
		levenshteinDistance("kitten", "sitting"));
  testi("levenshtein distance of ralph and ralph = ", 
		levenshteinDistance("ralph", "ralph"));
  testi("levenshtein distance of bcdefg and abcdef = ", 
		levenshteinDistance("bcdefg", "abcdef"));
  testi("levenshtein distance of care and late = ", 
		levenshteinDistance("care", "late"));

  testb("isAlpha(\"bars\") = ", isAlpha("bars"));
  testb("isAlpha(\"dfsf_sd\") = ", isAlpha("dfsf_sd"));
  testb("isAlpha(\"computer \") = ", isAlpha("computer "));
  testb("isAlphaNum(\"larry324xxxnoob\") = ", isAlphaNum("larry324xxxnoob"));
  testb("isAlphaNum(\"larry324xx_xnoob\") = ", isAlphaNum("larry324xx_xnoob"));

  return 0;
}


#endif
